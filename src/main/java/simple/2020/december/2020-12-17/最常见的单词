//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    TreeMap<String,Integer> map = new TreeMap<>();
    public String mostCommonWord(String paragraph, String[] banned) {
        Set<String> set = new HashSet<>();
        for (String s:banned)set.add(s);
        StringBuilder temp = new StringBuilder();
        for (Character c:paragraph.toCharArray()) {
            if (Character.isLetter(c)) {
                temp.append(c);
            } else {
                if (temp.length() > 0) {
                    String findWord = temp.toString().toLowerCase();
                    temp = new StringBuilder();
                    map.put(findWord,map.getOrDefault(findWord,1)+1);
                }
            }
        }
        if (temp.length() > 0) {
            String findWord = temp.toString().toLowerCase();
            temp = new StringBuilder();
            map.put(findWord,map.getOrDefault(findWord,1)+1);
        }
        int max = 0;
        String res = "";
        for (Map.Entry<String,Integer> entry:map.entrySet()) {
            if (entry.getValue() > max && !set.contains(entry.getKey())) {
                max = entry.getValue();
                res = entry.getKey();
            }
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
