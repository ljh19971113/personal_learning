//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    int[] bounds = {10000,1000,100,10,1};
    public List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> res = new ArrayList<>();
        int[] nums = initNums(right);
        for (int i = right;i >= left;i--) {
            if (checkNum(i)) {
                boolean flag = true;
                for (int j=0;j<nums.length;j++) {
                    if (nums[j] == 0){
                        break;
                    }
                    if (i%nums[j] != 0) {
                        flag = false;
                        break;
                    }
                }
                if (flag){
                    res.add(0,i);
                }
            }
            subNums(nums);
        }
        return res;
    }
    public int[] initNums(int right) {
        int[] res = new int[5];
        int step = 10;
        for (int i=0;i<res.length;i++) {
            if (right > 0) {
                res[i] = right%step;
                right /= 10;
            }
        }
        return res;
    }
    public boolean checkNum(int num) {
        int step = 10;
        while (num > 0) {
            if (num%step == 0) {
                return false;
            }
            num /= 10;
        }
        return true;
    }
    public void subNums(int[] nums) {
        int i = 0;
        if (nums[i] > 0) {
            nums[i]--;
        }else {
            while (i< nums.length && nums[i] == 0) {
                i++;
            }
            nums[i--]--;
            while (i>=0){
                nums[i--] = 9;
            }
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
