//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int findShortestSubArray(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int[] counts = new int[50000];
        int max = 0;
        for (int num:nums) {
            counts[num]++;
            if (counts[num] > max){
                max = counts[num];
            }
        }
        for (int i=0;i<counts.length;i++) {
            if (counts[i] == max) {
                list.add(i);
            }
        }
        int res = 50000;
        for (int num:list) {
            int left = 0;
            int right = nums.length-1;
            while (left < right) {
                if (nums[left] != num) {
                    left++;
                }
                if (nums[right] != num) {
                    right--;
                }
                if (nums[right] == num && nums[left] == num) {
                    break;
                }
            }
            res = Math.min(res,right-left+1);
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)