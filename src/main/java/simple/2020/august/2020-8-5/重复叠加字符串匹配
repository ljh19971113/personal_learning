//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int repeatedStringMatch(String A, String B) {
//        if (A.contains(B)){
//            return 1;
//        }
//        String check = B+B;
//        check = check.substring(1,check.length()-1);
//        if (!check.contains(B)){
//            return -1;
//        }
//        if (A.length() >= B.length()){
//            String bigA = A+A;
//            if (bigA.contains(B)){
//                return 2;
//            }else {
//                return -1;
//            }
//        }
        StringBuilder builder = new StringBuilder(A);
        for (int i=1;i<=10001;i++){
            if (builder.indexOf(B) >= 0){
                return i;
            }else if(builder.length() > A.length()+B.length()){
                return -1;
            } else {
                builder.append(A);
            }
        }
        return -1;

    }
}
//leetcode submit region end(Prohibit modification and deletion)