/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if (s == null && t == null) {
            return true;
        }
        if ((s == null && t != null) || (s != null && t == null)) {
            return false;
        }
        boolean result = false;
        if (s.val == t.val) {
            result = helper(s.left,t.left) && helper(s.right,t.right);
        }
        return isSubtree(s.left,t) || isSubtree(s.right,t) || result;
    }
    public boolean helper(TreeNode s,TreeNode t) {
        if (s == null && t == null) {
            return true;
        }
        if ((s == null && t != null) || (s != null && t == null)) {
            return false;
        }
        if (s.val == t.val) {
            return helper(s.left,t.left) && helper(s.right,t.right);
        }
        return false;
    }
}
//leetcode submit region end(Prohibit modification and deletion)