设计循环队列
//leetcode submit region begin(Prohibit modification and deletion)
class MyCircularQueue {
    int[] data;
    int head;
    int tail;
    int n;

    public MyCircularQueue(int k) {
        data = new int[k+1];
        n = k+1;
        head = 0;
        tail = 0;
    }

    public boolean enQueue(int value) {
        if (isFull()) return false;
        data[tail] = value;
        tail = (tail+1)%n;
        return true;
    }

    public boolean deQueue() {
        if (isEmpty()) return false;
        head = (head+1)%n;
        return true;
    }

    public int Front() {
        if (isEmpty()) {
            return -1;
        }
        return data[head];
    }

    public int Rear() {
        if (isEmpty()) {
            return -1;
        }
        return data[(tail+n-1)%n];
    }

    public boolean isEmpty() {
        return head == tail;
    }

    public boolean isFull() {
        return (tail+1)%n == head;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
//leetcode submit region end(Prohibit modification and deletion)
20210529