复杂链表的复制
//leetcode submit region begin(Prohibit modification and deletion)
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    HashMap<Node,Node> map = new HashMap<Node, Node>();
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        if (map.containsKey(head)) {
            return map.get(head);
        }
        Node node = new Node(head.val);
        map.put(head,node);
        node.next = copyRandomList(head.next);
        node.random = copyRandomList(head.random);
        return node;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
20210506 我是鶸

//leetcode submit region begin(Prohibit modification and deletion)
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node,Node> map = new HashMap<Node, Node>();
        Node dummyNode = new Node(0);
        Node cur = dummyNode;
        while (head != null) {
            Node node = null;
            if (map.containsKey(head)) {
                node = map.get(head);
            } else {
                node = new Node(head.val);
                map.put(head,node);
            }
            if (head.random != null) {
                if (map.containsKey(head.random)) {
                    node.random = map.get(head.random);
                } else {
                    Node random = new Node(head.random.val);
                    map.put(head.random,random);
                    node.random = random;
                }
            }
            head = head.next;
            cur.next = node;
            cur = cur.next;
        }
        return dummyNode.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
20210507  修改了一下自己之前的方法，终于成功了，原因好像是map中head.random在某种意义上和head等价
仔细想想，传入值head.next,其实也就表示某个Node的地址，head.random亦是如此，所以两者等价也就不奇怪了，涨知识了
