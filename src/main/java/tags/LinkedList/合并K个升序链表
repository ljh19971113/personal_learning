class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length < 1) {
            return null;
        }
        for (int step=1;step<lists.length;step+=step) {
            for (int i=0;i<lists.length;i+=(step+step)){
                if (i+step < lists.length) {
                    lists[i] = mergeTwoLists(lists[i],lists[i+step]);
                }
            }
        }
        return lists[0];
    }
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode mergeList = new ListNode(0);
        ListNode cur = mergeList;
        while (l1 != null && l2 != null) {
            if (l1.val > l2.val) {
                cur.next = l2;
                l2 = l2.next;
            } else {
                cur.next = l1;
                l1 = l1.next;
            }
            cur = cur.next;
        }
        if (l1 != null) {
            cur.next = l1;
        } else {
            cur.next = l2;
        }
        return mergeList.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)  20210415