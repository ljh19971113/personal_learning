class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        return reverse(addTwoNumbers2(l1, l2));
    }
    private ListNode reverse(ListNode list) {
        if (list == null) {
            return list;
        }
        ListNode node = new ListNode(0);
        while (list != null) {
           ListNode temp = list;
           list = list.next;
           temp.next = null;
           ListNode temp2 = node.next;
           node.next = temp;
           node.next.next = temp2;
        }
        return node.next;
    }
    public ListNode addTwoNumbers2(ListNode l1, ListNode l2) {
        ListNode node = new ListNode(0);
        ListNode temp = node;
        int c = 0;
        while (l1 != null || l2 != null || c != 0) {
            int num = 0;
            if (l1 != null) {
                num += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                num += l2.val;
                l2 = l2.next;
            }
            num += c;
            c = num/10;
            temp.next = new ListNode(num % 10);
            temp = temp.next;
        }
        return node.next;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
