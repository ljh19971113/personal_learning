//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }
        ListNode slow = head;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode afterNode = reverseList(slow.next);
        slow.next = null;
        ListNode beforeNode = head;
        while (afterNode != null) {
            ListNode temp = beforeNode.next;
            beforeNode.next = afterNode;
            afterNode = afterNode.next;
            beforeNode.next.next = temp;
            beforeNode = temp;
        }
    }

    private ListNode reverseList(ListNode node) {
        ListNode cur = null;
        while (node != null) {
            ListNode temp = node;
            node = node.next;
            temp.next = cur;
            cur = temp;
        }
        return cur;
    }
}
//leetcode submit region end(Prohibit modification and deletion)  20210501