//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ListNode cur;
    public TreeNode sortedListToBST(ListNode head) {
        if (head == null) {
            return null;
        }
        cur = head;
        return buildBST(0,length(head)-1);
    }
    TreeNode buildBST(int left, int right) {
        if (left > right) {
            return null;
        }
        int mid = left+(right-left+1)/2;
        TreeNode root = new TreeNode();
        root.left = buildBST(left,mid-1);
        root.val = cur.val;
        cur = cur.next;
        root.right = buildBST(mid+1,right);
        return root;
    }


    int length(ListNode node) {
        int length = 0;
        while (node != null) {
            length++;
            node = node.next;
        }
        return length;
    }
}
//leetcode submit region end(Prohibit modification and deletion)   借鉴他人
