//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int[][] temp = intervals;
        intervals = new int[temp.length+1][2];
        intervals[0] = newInterval;
        for (int i=1;i<intervals.length;i++) {
            intervals[i] = temp[i-1];
        }
        if (intervals.length < 2) {
            return intervals;
        }
        for (int i = 1;i<intervals.length;i++) {
            for (int j=i;j>0;j--) {
                if (intervals[j][0] < intervals[j-1][0]) {
                    int[] t = intervals[j];
                    intervals[j] = intervals[j-1];
                    intervals[j-1] = t;
                }else {
                    break;
                }
            }
        }
        System.out.println(Arrays.deepToString(intervals));
        temp = new int[intervals.length][2];
        int left = intervals[0][0];
        int right = intervals[0][1];
        int N = 0;
        for (int i=1;i<intervals.length;i++) {
            if (right >= intervals[i][0]) {
                right = Math.max(right,intervals[i][1]);
            } else {
                temp[N++] = new int[]{left,right};
                left = intervals[i][0];
                right = intervals[i][1];
            }
        }
        temp[N++] = new int[]{left,right};
        int[][] res = new int[N][2];
        for (int i=0;i<N;i++) {
            res[i] = temp[i];
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
