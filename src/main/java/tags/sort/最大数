//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public String largestNumber(int[] nums) {
        Integer[] temp = new Integer[nums.length];
        for (int i=0;i<nums.length;i++) {
            temp[i] = nums[i];
        }
        Arrays.sort(temp,new CompareForNumber().reversed());
        StringBuilder res = new StringBuilder();
        for (int i=0;i<nums.length;i++) {
            res.append(temp[i]);
        }
        String result = res.toString();
        if (result.startsWith("0")){
            return "0";
        }
        return result;
    }
    class CompareForNumber implements Comparator<Integer> {
        @Override
        public int compare(Integer o1, Integer o2) {
            String s1 = o1.toString();
            String s2 = o2.toString();
            int l1 = s1.length();
            int l2 = s2.length();
            int len = Math.max(l1,l2);
            for (int i=0;i<len;i++) {
                if (s1.charAt(i%l1) != s2.charAt(i%l2)) {
                    return s1.charAt(i%l1) - s2.charAt(i%l2);
                }
            }
            String s3 = s1+s2;
            String s4 = s2+s1;
            for (int i=0;i<s3.length();i++) {
                if (s3.charAt(i) != s4.charAt(i)) {
                    return s3.charAt(i) - s4.charAt(i);
                }
            }
            return 0;
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)